xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also https://pdos.csail.mit.edu/6.828/, which
provides pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Silas Boyd-Wickizer, Anton Burtsev, Dan Cross, Cody Cutler, Mike CAT,
Tej Chajed, Asami Doi, eyalz800, , Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, Peter Froehlich, Yakir Goaron,Shivam
Handa, Bryan Henry, jaichenhengjie, Jim Huang, Alexander Kapshuk,
Anders Kaseorg, kehao95, Wolfgang Keller, Jonathan Kimmitt, Eddie
Kohler, Austin Liew, Imbar Marinescu, Yandong Mao, Matan Shabtay,
Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel Nider,
Greg Price, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Takahiro, Cam Tenny, tyfkda, Rafael Ubal, Warren Toomey,
Stephen Tu, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas
Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, and Zou Chang
Wei.

The code in the files that constitute xv6 is
Copyright 2006-2020 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu). The main purpose of xv6 is as a teaching
operating system for MIT's 6.S081, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu. Once they are installed, and in your shell
search path, you can run "make qemu".

Develop description
4.2
I have made pstat.c and use sys_getpstat(), getpstat() to get right output
The output I tested was
$ pstat
pid  ticks  queue
0    0      0

4.3
I have modify the getpstat() to get useful information.
I have used the code in piazza and modify the helper function, which is kgetpstat
to get right information
After I finish and test it. The output was
$pstat
pid  ticks   queue
3    0       0

4.4
I have add queue in proc.c. The queue is basically the int array which match to the index of proc[] + one more array for queue.
The last array is the head of queue. Since queue is linked list the value is the index of next queue.
I didn't implement double linked list since the queue is FIFO. This mean that only first queue, which stored inside the head of queue
is modify.
I have modify enqueue and dequeue so I can add queue and delete a queue.
I have add the enqueue when there is p->state = RUNNABLE appears. There is 5 place inside proc.c.
I have update the process tick in yield because whenever the yied calls, it causes timer interrupt.
I have modify the scheduler() since the previous one is using array not queue. So if all of the queue is -1 this mean
that there is no queue, which means there is nothing to be RUNNABLE.

4.5
I have add 2 more array in my qtable so I can use three queue. The qtable[NPROC] is the highest queue and the qtable[NPROC+2] is lowest queue.
I have modify the scheduler to check if the process exceed the each quanta. If exceed move the queue to next lowest queue and reset the tick in the process.

4.6
Modify the yield() and add totalticks so I can track the priority boost. If totalticks is 32 then add all of the lowest queue to the highest queue.

4.7
Create schedtest.c but it cause zombie exit whenever I call the $schedtest or $pstat.